name: CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  # sonarcloud:
  #   name: sonarqube
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'

  #     - name: Install dependencies
  #       run: yarn

  #     - name: Test and coverage
  #       run: yarn test:cov

  #     - name: SonarQube Cloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    # needs: [sonarcloud]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to AWS ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      # Step 4: Build and tag the Docker image
      - name: Build Docker Image
        run: |
          docker build -t my-app:latest .
          docker tag my-app:latest ${{ secrets.ECR_REPOSITORY }}:latest

      # Step 5: Push the Docker image to ECR
      - name: Push to Amazon ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:latest

      - name: Deploy Aws EKS
        if: steps.login-ecr.outcome != 'failure'
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
        run: |
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
          kubectl apply -f api-svc
